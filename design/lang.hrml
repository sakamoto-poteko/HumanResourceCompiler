let uninit;

sub start()
{
    uninit = 0;
    outbox(uninit);
}

sub fail()
{
    uninit = 1;
    outbox(uninit);
}
// // import other modules
// import xxx;
// import lang_mod;

// // only single line comments allowed
// init floor[1] = 1; // init floor[id] sets the initial value for a box on the floor
// init floor[0] = 0;
// init floor_max = 10;

// let globalint = 800 + 1 * -100;
// let ninit;

// // A function is defined, which takes an argument. 
// // Only one or zero argument is allowed.
// function countdown(a) {
//     for (let i = a, i >= 0, --i) {
//         outbox(i / 1);
//         continue;
//     }
    
//     let b;
//     let ee;
    
//     if (globalint) {
//         let b1;
//         {let b2;{let b3;{ee = 5;}}}
//     } else {
//         ee = 10;
//     }
//     {{b = ee;}}


//     a = a + 9;

//     let xxx = (a + 0) - (a - 0) - (a * 0) - (0 + a) - (0 - a) - (0 * a) - (0 / a) - (0 % a);
//     // a - a - 0 - a - -a - 0 - 0 - 0
//     let yyy = (a * 1) - (1 * a) - (a / 1) - (a % 1);
//     // a - a - a - a
//     let zzz = true && false || true;
 
//     no_return_func();

//     return a;
// }

// // sub marks a no-return function
// sub no_return_func() {
//     // and it does nothing
// }

// // the program starts here
// sub start() {
//     // a loop construct
//     // int(true) = 1, int(false) = 0, boolean and int are basically the same thing
//     // bool(1) = true, bool(0) = false, bool(anything except 0) = true
//     while (true) {
//         // inbox and outbox
//         let a = inbox();
//         let b = inbox();
//         if (a > b) {
//             outbox(a);
//         } else if (a == b && !(a != 0 || b > 5)){
//             outbox(b);
//             break;
//             a = 0;
//         } else
//             outbox(0);
        
//         let c = a * ((((b * 1)))) + true * 10 - false / 5 % 1;
//         countdown(1);
//         let num = countdown(a * b == 0) + floor[3] % (10 + -1) * 5 - 2;
//         floor[2] = num;
//         floor[3] = floor[b] + c;
//         outbox(c);
//     }
//     return;
// }
