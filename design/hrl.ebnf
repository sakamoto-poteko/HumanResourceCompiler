(* end of statement terminal *)
variable_name = IDENTIFIER;
function_name = IDENTIFIER;
binary_operator = AND | OR | GT | LT | ADD | SUB | MUL | DIV | MOD | GE | LE | EE | NE;
literal = INTEGER | BOOLEAN;

(* Variable *)
variable_declaration = LET, variable_name, [EQ, expression];
variable_assignment = variable_name, EQ, expression;
floor_assignment = floor_access, EQ, expression;

(* Expression *)
expression = binary_expression | unary_expression;

(* Left recursion *)
binary_expression = expression, binary_operator, expression;
unary_expression = primary_expression | increment_expression | decrement_expression | not_expression | positive_expression | negative_expression;
increment_expression = ADDADD, variable_name;
decrement_expression = SUBSUB, variable_name;
not_expression = NOT, primary_expression;
positive_expression = ADD, primary_expression;
negative_expression = SUB, primary_expression;
floor_access = FLOOR, OPEN_BRACKET, expression, CLOSE_BRACKET;
(* invocation_expression and variable_name has FIRST/FIRST conflict *)
primary_expression = literal | parenthesized_expression | invocation_expression | variable_name | floor_access;
parenthesized_expression = OPEN_PAREN, expression, CLOSE_PAREN;
invocation_expression = function_name, OPEN_PAREN, [expression], CLOSE_PAREN;

(* Statement *)
empty_statement = T;
variable_declaration_statement = variable_declaration, T;
variable_assignment_statement = variable_assignment, T;
floor_assignment_statement = floor_assignment, T;
statement_block = OPEN_BRACE, {statement}, CLOSE_BRACE;
statement = variable_declaration_statement | embedded_statement;
embedded_statement = statement_block | empty_statement | iteration_statement | selection_statement | return_statement | break_statement | continue_statement | variable_assignment_statement | floor_assignment_statement | invocation_statement;
break_statement: BREAK, T;
continue_statement: CONTINUE, T;
invocation_statement = invocation_expression, T;
selection_statement = if_statement;
if_statement = IF, OPEN_PAREN, expression, CLOSE_PAREN, embedded_statement, [ELSE, embedded_statement];
iteration_statement = while_statement | for_statement;
while_statement = WHILE, OPEN_PAREN, expression, CLOSE_PAREN, embedded_statement;
for_statement = FOR, OPEN_PAREN, [variable_assignment | variable_declaration], COMMA, [expression], COMMA , [expression], CLOSE_PAREN, embedded_statement;
return_statement = RETURN, [expression], T;
(* floor init only appear outside the functions. usually at the beginning of the file *)
floor_box_init_statement = INIT, FLOOR, OPEN_BRACKET, INTEGER, CLOSE_BRACKET, EQ, INTEGER, T;
(* only one floor max allowed in a program *)
floor_max_init_statement = INIT, FLOOR_MAX, EQ, INTEGER, T;

(* Function and subprocedure *)
function_definition = FUNCTION, function_name, OPEN_PAREN, [IDENTIFIER], CLOSE_PAREN, statement_block;
subproc_definition = SUBWORD, function_name, OPEN_PAREN, [IDENTIFIER], CLOSE_PAREN, statement_block;


(* Compilation Unit *)
import_directive = IMPORT, IDENTIFIER, T;
floor_inits = {floor_box_init_statement}, [floor_max_init_statement] | [floor_max_init_statement], {floor_box_init_statement};
compilation_unit = {import_directive}, floor_inits, {variable_declaration_statement | function_definition | subproc_definition};
